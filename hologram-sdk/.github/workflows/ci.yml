name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        cd sdks/python/hologram_docker
        pip install -e .[dev]
        cd ../hologram
        pip install -e .[dev]
    
    - name: Install Go dependencies
      run: go mod download
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Lint Python
      run: |
        cd sdks/python/hologram_docker
        black --check .
        isort --check-only .
        mypy .
        cd ../hologram
        black --check .
        isort --check-only .
        mypy .
    
    - name: Lint Go
      run: |
        go vet ./...
        golangci-lint run
    
    - name: Lint Node.js
      run: npm run lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        go-version: ['1.20', '1.21']
        node-version: ['16', '18', '20']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        # Python
        cd sdks/python/hologram_docker
        pip install -e .[dev]
        cd ../hologram
        pip install -e .[dev]
        
        # Go
        go mod download
        
        # Node.js
        npm ci
    
    - name: Test Python
      run: |
        cd sdks/python/hologram_docker
        pytest
        cd ../hologram
        pytest
    
    - name: Test Go
      run: go test ./...
    
    - name: Test Node.js
      run: npm test

  integration:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        # Python
        cd sdks/python/hologram_docker
        pip install -e .[dev]
        cd ../hologram
        pip install -e .[dev]
        
        # Go
        go mod download
        
        # Node.js
        npm ci
    
    - name: Build hologramd
      run: |
        cd engine
        go build -o hologramd ./cmd/hologramd
    
    - name: Run integration tests
      run: |
        cd tests/parity
        pytest -v
        cd ../workloads
        pytest -v

  benchmarks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        # Python
        cd sdks/python/hologram_docker
        pip install -e .[dev]
        cd ../hologram
        pip install -e .[dev]
        
        # Go
        go mod download
        
        # Node.js
        npm ci
    
    - name: Run benchmarks
      run: |
        cd tests/perf
        pytest -v --benchmark-only
        cd ../../engine
        go test -bench=. -benchmem ./...
