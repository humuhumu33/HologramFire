#!/usr/bin/env python3
"""
Slack Notifier Job Step for GitHub Actions
Pulls latest p95s and last E2E CID/name into GitHub Job Summary AND posts to Slack/Teams.
"""
import json
import os
import sys
import requests
from pathlib import Path
from typing import Dict, Any, Optional

# Import our existing CI summary functionality
from scripts.ci_summary import read_perf_best, read_e2e_highlights

def generate_job_summary(perf_data: Dict[str, float], e2e_data: Dict[str, Any], status: str) -> str:
    """Generate GitHub Job Summary content."""
    # Build performance section
    perf_text = ""
    if perf_data:
        perf_lines = []
        for metric, p95 in sorted(perf_data.items()):
            perf_lines.append(f"| `{metric}` | {p95:.1f}ms |")
        perf_text = "\n".join(perf_lines)
    else:
        perf_text = "| No performance data | - |"
    
    # Build E2E section
    e2e_text = ""
    if e2e_data:
        e2e_lines = []
        for event_type, event in sorted(e2e_data.items()):
            cid = event.get("cid", "N/A")[:12] + "..." if event.get("cid") else "N/A"
            name = event.get("name", "N/A")
            variant = event.get("variant", "N/A")
            e2e_lines.append(f"| **{event_type}** | `{name}` | `{variant}` | `{cid}` |")
        e2e_text = "\n".join(e2e_lines)
    else:
        e2e_text = "| No E2E events | - | - | - |"
    
    # Determine status emoji
    status_emoji = {
        "pass": "‚úÖ",
        "fail": "‚ùå",
        "running": "üîÑ",
        "unknown": "‚ùì"
    }.get(status, "‚ùì")
    
    # Build job summary
    summary = f"""## {status_emoji} Hologram Pipeline - {status.upper()}

### üìä Performance (Best p95)
| Metric | p95 (ms) |
|--------|----------|
{perf_text}

### üöÄ E2E Highlights
| Event | Name | Variant | CID |
|-------|------|---------|-----|
{e2e_text}

### üîó Links
- [üìä HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
- [üìà Performance CSVs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
- [üéØ E2E Events](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

---
*Generated by Hologram Pipeline* üöÄ
"""
    
    return summary

def send_slack_notification(perf_data: Dict[str, float], e2e_data: Dict[str, Any], status: str) -> bool:
    """Send Slack notification."""
    webhook_url = os.getenv("SLACK_WEBHOOK_URL")
    if not webhook_url:
        print("‚ö†Ô∏è No SLACK_WEBHOOK_URL set, skipping Slack notification")
        return True
    
    # Determine color based on status
    color_map = {
        "pass": "good",
        "fail": "danger",
        "running": "warning",
        "unknown": "#808080"
    }
    color = color_map.get(status, "#808080")
    
    # Build performance section
    perf_text = ""
    if perf_data:
        perf_lines = []
        for metric, p95 in sorted(perf_data.items()):
            perf_lines.append(f"‚Ä¢ `{metric}`: {p95:.1f}ms")
        perf_text = "\n".join(perf_lines)
    else:
        perf_text = "‚Ä¢ No performance data"
    
    # Build E2E section
    e2e_text = ""
    if e2e_data:
        e2e_lines = []
        for event_type, event in sorted(e2e_data.items()):
            cid = event.get("cid", "N/A")[:12] + "..." if event.get("cid") else "N/A"
            name = event.get("name", "N/A")
            e2e_lines.append(f"‚Ä¢ **{event_type}**: `{name}` - CID: `{cid}`")
        e2e_text = "\n".join(e2e_lines)
    else:
        e2e_text = "‚Ä¢ No E2E events"
    
    # Build Slack message
    message = {
        "attachments": [
            {
                "color": color,
                "title": f"üî• Hologram Pipeline - {status.upper()}",
                "title_link": f"https://github.com/{os.getenv('GITHUB_REPOSITORY', 'your-org/hologram')}/actions/runs/{os.getenv('GITHUB_RUN_ID', 'unknown')}",
                "fields": [
                    {
                        "title": "üìä Performance (Best p95)",
                        "value": perf_text,
                        "short": False
                    },
                    {
                        "title": "üöÄ E2E Highlights",
                        "value": e2e_text,
                        "short": False
                    }
                ],
                "footer": "Hologram Pipeline",
                "ts": int(os.getenv("GITHUB_RUN_ID", "0"))
            }
        ]
    }
    
    try:
        response = requests.post(webhook_url, json=message, timeout=10)
        response.raise_for_status()
        print("‚úÖ Slack notification sent successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to send Slack notification: {e}")
        return False

def send_teams_notification(perf_data: Dict[str, float], e2e_data: Dict[str, Any], status: str) -> bool:
    """Send Teams notification."""
    webhook_url = os.getenv("TEAMS_WEBHOOK_URL")
    if not webhook_url:
        print("‚ö†Ô∏è No TEAMS_WEBHOOK_URL set, skipping Teams notification")
        return True
    
    # Determine color based on status
    color_map = {
        "pass": "00ff00",
        "fail": "ff0000",
        "running": "ffff00",
        "unknown": "808080"
    }
    color = color_map.get(status, "808080")
    
    # Build performance section
    perf_text = ""
    if perf_data:
        perf_lines = []
        for metric, p95 in sorted(perf_data.items()):
            perf_lines.append(f"‚Ä¢ **{metric}**: {p95:.1f}ms")
        perf_text = "<br>".join(perf_lines)
    else:
        perf_text = "‚Ä¢ No performance data"
    
    # Build E2E section
    e2e_text = ""
    if e2e_data:
        e2e_lines = []
        for event_type, event in sorted(e2e_data.items()):
            cid = event.get("cid", "N/A")[:12] + "..." if event.get("cid") else "N/A"
            name = event.get("name", "N/A")
            e2e_lines.append(f"‚Ä¢ **{event_type}**: `{name}` - CID: `{cid}`")
        e2e_text = "<br>".join(e2e_lines)
    else:
        e2e_text = "‚Ä¢ No E2E events"
    
    # Build Teams message
    message = {
        "@type": "MessageCard",
        "@context": "http://schema.org/extensions",
        "themeColor": color,
        "summary": f"Hologram Pipeline - {status.upper()}",
        "sections": [
            {
                "activityTitle": f"üî• Hologram Pipeline - {status.upper()}",
                "activitySubtitle": f"GitHub Actions Run: {os.getenv('GITHUB_RUN_ID', 'Unknown')}",
                "activityImage": "https://github.com/favicon.ico",
                "facts": [
                    {
                        "name": "üìä Performance (Best p95)",
                        "value": perf_text
                    },
                    {
                        "name": "üöÄ E2E Highlights",
                        "value": e2e_text
                    }
                ],
                "markdown": True
            }
        ],
        "potentialAction": [
            {
                "@type": "OpenUri",
                "name": "View in GitHub Actions",
                "targets": [
                    {
                        "os": "default",
                        "uri": f"https://github.com/{os.getenv('GITHUB_REPOSITORY', 'your-org/hologram')}/actions/runs/{os.getenv('GITHUB_RUN_ID', 'unknown')}"
                    }
                ]
            }
        ]
    }
    
    try:
        response = requests.post(webhook_url, json=message, timeout=10)
        response.raise_for_status()
        print("‚úÖ Teams notification sent successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to send Teams notification: {e}")
        return False

def determine_status(perf_data: Dict[str, float], e2e_data: Dict[str, Any]) -> str:
    """Determine overall pipeline status."""
    # Check if we're in CI
    if os.getenv("GITHUB_ACTIONS"):
        # In CI, check current run status
        return check_current_ci_status()
    else:
        # Local, check data availability
        if not perf_data and not e2e_data:
            return "unknown"
        
        # Check E2E success
        if e2e_data:
            success_events = {"publish", "install", "use"}
            found_events = set(e2e_data.keys())
            if not success_events.intersection(found_events):
                return "fail"
        
        return "pass"

def check_current_ci_status() -> str:
    """Check current CI run status."""
    # This would be called from within CI
    # For now, return a placeholder
    return "running"

def main():
    """Main function."""
    # Get performance and E2E data
    perf_data = read_perf_best()
    e2e_data = read_e2e_highlights()
    
    # Determine status
    status = determine_status(perf_data, e2e_data)
    
    # Generate job summary
    job_summary = generate_job_summary(perf_data, e2e_data, status)
    
    # Write to GitHub step summary
    summary_file = os.getenv("GITHUB_STEP_SUMMARY")
    if summary_file:
        with open(summary_file, "w", encoding="utf-8") as f:
            f.write(job_summary)
        print("‚úÖ Job summary written to GitHub step summary")
    else:
        print("‚ö†Ô∏è No GITHUB_STEP_SUMMARY set, printing to stdout:")
        print(job_summary)
    
    # Send notifications
    slack_success = send_slack_notification(perf_data, e2e_data, status)
    teams_success = send_teams_notification(perf_data, e2e_data, status)
    
    # Exit with appropriate code
    if status == "fail":
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
